Traceback (most recent call last):
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
axbts = cat.P3.AXBT.Level_3.to_dask()
swifts = [cat[s].all.to_dask() for s in list(cat) if "SWIFT" in s]
axbt_dates = np.intersect1d(np.unique(axbts.time.astype("datetime64[D]").values),
                            flight_dates)

swift_candidates = np.unique(np.concatenate([swift.time.astype('datetime64[D]').values
                                             for swift in swifts]))
# Dates with potential SWIFT/P-3 overlap
swift_dates = np.intersect1d(swift_candidates, axbt_dates)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mHTTPError[0m                                 Traceback (most recent call last)
[0;32m/tmp/ipykernel_5876/4194817175.py[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0maxbts[0m [0;34m=[0m [0mcat[0m[0;34m.[0m[0mP3[0m[0;34m.[0m[0mAXBT[0m[0;34m.[0m[0mLevel_3[0m[0;34m.[0m[0mto_dask[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mswifts[0m [0;34m=[0m [0;34m[[0m[0mcat[0m[0;34m[[0m[0ms[0m[0;34m][0m[0;34m.[0m[0mall[0m[0;34m.[0m[0mto_dask[0m[0;34m([0m[0;34m)[0m [0;32mfor[0m [0ms[0m [0;32min[0m [0mlist[0m[0;34m([0m[0mcat[0m[0;34m)[0m [0;32mif[0m [0;34m"SWIFT"[0m [0;32min[0m [0ms[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m axbt_dates = np.intersect1d(np.unique(axbts.time.astype("datetime64[D]").values),
[1;32m      4[0m                             flight_dates)
[1;32m      5[0m [0;34m[0m[0m

[0;32m/tmp/ipykernel_5876/4194817175.py[0m in [0;36m<listcomp>[0;34m(.0)[0m
[1;32m      1[0m [0maxbts[0m [0;34m=[0m [0mcat[0m[0;34m.[0m[0mP3[0m[0;34m.[0m[0mAXBT[0m[0;34m.[0m[0mLevel_3[0m[0;34m.[0m[0mto_dask[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mswifts[0m [0;34m=[0m [0;34m[[0m[0mcat[0m[0;34m[[0m[0ms[0m[0;34m][0m[0;34m.[0m[0mall[0m[0;34m.[0m[0mto_dask[0m[0;34m([0m[0;34m)[0m [0;32mfor[0m [0ms[0m [0;32min[0m [0mlist[0m[0;34m([0m[0mcat[0m[0;34m)[0m [0;32mif[0m [0;34m"SWIFT"[0m [0;32min[0m [0ms[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m axbt_dates = np.intersect1d(np.unique(axbts.time.astype("datetime64[D]").values),
[1;32m      4[0m                             flight_dates)
[1;32m      5[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/base.py[0m in [0;36mto_dask[0;34m(self)[0m
[1;32m     67[0m     [0;32mdef[0m [0mto_dask[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     68[0m         [0;34m"""Return xarray object where variables are dask arrays"""[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 69[0;31m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0mread_chunked[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     70[0m [0;34m[0m[0m
[1;32m     71[0m     [0;32mdef[0m [0mclose[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/base.py[0m in [0;36mread_chunked[0;34m(self)[0m
[1;32m     42[0m     [0;32mdef[0m [0mread_chunked[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     43[0m         [0;34m"""Return xarray object (which will have chunks)"""[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 44[0;31m         [0mself[0m[0;34m.[0m[0m_load_metadata[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     45[0m         [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_ds[0m[0;34m[0m[0;34m[0m[0m
[1;32m     46[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake/source/base.py[0m in [0;36m_load_metadata[0;34m(self)[0m
[1;32m    234[0m         [0;34m"""load metadata only if needed"""[0m[0;34m[0m[0;34m[0m[0m
[1;32m    235[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0m_schema[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 236[0;31m             [0mself[0m[0;34m.[0m[0m_schema[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_get_schema[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    237[0m             [0mself[0m[0;34m.[0m[0mdtype[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_schema[0m[0;34m.[0m[0mdtype[0m[0;34m[0m[0;34m[0m[0m
[1;32m    238[0m             [0mself[0m[0;34m.[0m[0mshape[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_schema[0m[0;34m.[0m[0mshape[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/base.py[0m in [0;36m_get_schema[0;34m(self)[0m
[1;32m     16[0m [0;34m[0m[0m
[1;32m     17[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0m_ds[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 18[0;31m             [0mself[0m[0;34m.[0m[0m_open_dataset[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     19[0m [0;34m[0m[0m
[1;32m     20[0m             metadata = {

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/opendap.py[0m in [0;36m_open_dataset[0;34m(self)[0m
[1;32m     91[0m     [0;32mdef[0m [0m_open_dataset[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     92[0m         [0;32mimport[0m [0mxarray[0m [0;32mas[0m [0mxr[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 93[0;31m         [0mstore[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_get_store[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     94[0m         [0mself[0m[0;34m.[0m[0m_ds[0m [0;34m=[0m [0mxr[0m[0;34m.[0m[0mopen_dataset[0m[0;34m([0m[0mstore[0m[0;34m,[0m [0mchunks[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mchunks[0m[0;34m,[0m [0;34m**[0m[0mself[0m[0;34m.[0m[0m_kwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/intake_xarray/opendap.py[0m in [0;36m_get_store[0;34m(self)[0m
[1;32m     83[0m             [0;32mreturn[0m [0mxr[0m[0;34m.[0m[0mbackends[0m[0;34m.[0m[0mNetCDF4DataStore[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0mself[0m[0;34m.[0m[0murlpath[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     84[0m         [0;32melif[0m [0mself[0m[0;34m.[0m[0mengine[0m [0;34m==[0m [0;34m"pydap"[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 85[0;31m             [0;32mreturn[0m [0mxr[0m[0;34m.[0m[0mbackends[0m[0;34m.[0m[0mPydapDataStore[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0mself[0m[0;34m.[0m[0murlpath[0m[0;34m,[0m [0msession[0m[0;34m=[0m[0msession[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     86[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     87[0m             raise ValueError(

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/xarray/backends/pydap_.py[0m in [0;36mopen[0;34m(cls, url, session)[0m
[1;32m     91[0m     [0;32mdef[0m [0mopen[0m[0;34m([0m[0mcls[0m[0;34m,[0m [0murl[0m[0;34m,[0m [0msession[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     92[0m [0;34m[0m[0m
[0;32m---> 93[0;31m         [0mds[0m [0;34m=[0m [0mpydap[0m[0;34m.[0m[0mclient[0m[0;34m.[0m[0mopen_url[0m[0;34m([0m[0murl[0m[0;34m,[0m [0msession[0m[0;34m=[0m[0msession[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     94[0m         [0;32mreturn[0m [0mcls[0m[0;34m([0m[0mds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     95[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/pydap/client.py[0m in [0;36mopen_url[0;34m(url, application, session, output_grid, timeout)[0m
[1;32m     64[0m     [0mnever[0m [0mretrieve[0m [0mcoordinate[0m [0maxes[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m     65[0m     """
[0;32m---> 66[0;31m     dataset = DAPHandler(url, application, session, output_grid,
[0m[1;32m     67[0m                          timeout).dataset
[1;32m     68[0m [0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/pydap/handlers/dap.py[0m in [0;36m__init__[0;34m(self, url, application, session, output_grid, timeout)[0m
[1;32m     52[0m         [0mddsurl[0m [0;34m=[0m [0murlunsplit[0m[0;34m([0m[0;34m([0m[0mscheme[0m[0;34m,[0m [0mnetloc[0m[0;34m,[0m [0mpath[0m [0;34m+[0m [0;34m'.dds'[0m[0;34m,[0m [0mquery[0m[0;34m,[0m [0mfragment[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     53[0m         [0mr[0m [0;34m=[0m [0mGET[0m[0;34m([0m[0mddsurl[0m[0;34m,[0m [0mapplication[0m[0;34m,[0m [0msession[0m[0;34m,[0m [0mtimeout[0m[0;34m=[0m[0mtimeout[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 54[0;31m         [0mraise_for_status[0m[0;34m([0m[0mr[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     55[0m         [0;32mif[0m [0;32mnot[0m [0mr[0m[0;34m.[0m[0mcharset[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     56[0m             [0mr[0m[0;34m.[0m[0mcharset[0m [0;34m=[0m [0;34m'ascii'[0m[0;34m[0m[0;34m[0m[0m

[0;32m/usr/share/miniconda/envs/how_to_eurec4a/lib/python3.8/site-packages/pydap/net.py[0m in [0;36mraise_for_status[0;34m(response)[0m
[1;32m     31[0m     [0;31m# Raise error if status is above 300:[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     32[0m     [0;32mif[0m [0mresponse[0m[0;34m.[0m[0mstatus_code[0m [0;34m>=[0m [0;36m300[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         raise HTTPError(
[0m[1;32m     34[0m             [0mdetail[0m[0;34m=[0m[0mresponse[0m[0;34m.[0m[0mstatus[0m[0;34m+[0m[0;34m'\n'[0m[0;34m+[0m[0mresponse[0m[0;34m.[0m[0mtext[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m     35[0m             [0mheaders[0m[0;34m=[0m[0mresponse[0m[0;34m.[0m[0mheaders[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;31mHTTPError[0m: 404 Not Found
Error {
    code = 404;
    message = "Datasets/ATOMIC/data/swift_drifters/EUREC4A_ATOMIC_SWIFT16_All_v2.1.nc";
};

HTTPError: 404 Not Found
Error {
    code = 404;
    message = "Datasets/ATOMIC/data/swift_drifters/EUREC4A_ATOMIC_SWIFT16_All_v2.1.nc";
};


